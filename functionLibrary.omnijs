/* global PlugIn Version DateComponents Calendar tags ApplyResult library Project Task folders inbox */
/* eslint spaced-comment: ["error", "always", { "exceptions": ["{"] }] */
/*{
"type": "library",
"targets": ["omnifocus"],
"identifier": "com.KaitlinSalzke.functionLibrary",
"version": "1.0"
}*/

(() => {
  const functionLibrary = new PlugIn.Library(new Version('1.0'))

  functionLibrary.adjustDateByDays = function (date, days) {
    const timeToAdd = new DateComponents()
    timeToAdd.day = days
    return Calendar.current.dateByAddingDateComponents(date, timeToAdd)
  }

  functionLibrary.findTag = function (nameToFind) {
    let targetTag = null
    tags.apply(function (tag) {
      if (tag.name === nameToFind) {
        targetTag = tag
        return ApplyResult.Stop
      }
    })
    return targetTag
  }

  functionLibrary.getAllRemainingTasks = function () {
    const allTasks = []
    library.apply(function (item) {
      if (
        item instanceof Project &&
        (item.status === Project.Status.Active ||
          item.status === Project.Status.OnHold) &&
        item.task.hasChildren
      ) {
        item.task.children.forEach((tsk) => {
          if (
            tsk.taskStatus !== Task.Status.Dropped &&
            tsk.taskStatus !== Task.Status.Completed
          ) {
            allTasks.push(tsk)
          }
        })
      }
    })
    return allTasks
  }

  functionLibrary.getContainingFolder = function (task) {
    const project = task.project || task.containingProject || ''
    const emptyResult = {
      name: 'No Folder'
    }
    if (project === '') {
      return emptyResult
    }
    let foundFolder = null
    let i = 0
    while (foundFolder === null && i < folders.length) {
      const topFolderToCheck = folders[i]
      topFolderToCheck.apply((item) => {
        if (item === project) {
          foundFolder = topFolderToCheck
          return ApplyResult.Stop
        }
      })
      i++
    }
    if (foundFolder === null) {
      const result = {
        name: 'No Folder'
      }
      return result
    }
    return foundFolder || emptyResult
  }

  functionLibrary.getParent = (task) => {
    let parent = null
    let project = null
    if (task.containingProject == null) {
      project = inbox
    } else {
      project = task.containingProject.task
    }
    project.apply((item) => {
      if (item.children.includes(task)) {
        parent = item
        return ApplyResult.Stop
      }
    })
    return parent
  }

  functionLibrary.getRootTask = function (childTask) {
    let rootTask = null
    let index = 0
    const tasksToCheck = childTask.containingProject.task.children
    while (rootTask === null && index < tasksToCheck.length) {
      tasksToCheck[index].apply(function (task) {
        if (task === childTask) {
          rootTask = tasksToCheck[index]
          return ApplyResult.Stop
        }
      })
      index++
    }
    return rootTask
  }

  functionLibrary.getTaskWithId = function (taskId, tagToSearch) {
    let foundTask = null
    if (tagToSearch) {
      let i = 0
      while (i < tagToSearch.tasks.length) {
        if (tagToSearch.tasks[i].id.primaryKey === taskId) {
          return tagToSearch.tasks[i]
        }
        i++
      }
    }

    library.apply((item) => {
      if (item.id.primaryKey === taskId) {
        foundTask = item
        return ApplyResult.Stop
      }
    })

    inbox.apply((item) => {
      if (item.id.primaryKey === taskId) {
        foundTask = item
        return ApplyResult.Stop
      }
    })

    return foundTask
  }

  functionLibrary.isStalled = function (project) {
    // return false if SAL
    if (project.containsSingletonActions) {
      return false
    }
    // return false if has a next task
    if (project.nextTask !== null && project.nextTask !== project.task) {
      return false
    }
    if (!project.task.hasChildren) {
      return true
    }
    let hasBlockedChildren = false
    project.task.apply((child) => {
      if (child.taskStatus === Task.Status.Blocked) {
        hasBlockedChildren = true
        return ApplyResult.Stop
      }
    })
    if (hasBlockedChildren) {
      return false
    }
    return true
  }

  functionLibrary.removeProjectTagsFromTasks = function (
    taskArray,
    projectTagArray
  ) {
    taskArray.forEach((task) => {
      // check if this is a project; if not remove tags
      if (
        task.project == null &&
        !projectTagArray.includes(task.containingProject)
      ) {
        task.removeTags(projectTagArray)
      }
    })
  }

  functionLibrary.removeTrailingSpaceFromName = function (task) {
    task.name = task.name.replace(/ $/, '')
  }

  functionLibrary.replaceTag = function (tasksArray, oldTag, newTag) {
    tasksArray.forEach(function (task) {
      task.addTag(oldTag)
      task.removeTag(newTag)
    })
  }

  return functionLibrary
})()
